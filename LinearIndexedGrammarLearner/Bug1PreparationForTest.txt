
				if (counter == 0)
                {
                    counter++;
                    var rc = new RuleCoordinates()
                    {
                        LHSIndex = 4,
                        RHSIndex = 107
                    };

                    mutatedGrammar.StackConstantRules.Add(rc);

                    var r = ContextSensitiveGrammar.RuleSpace[rc];
                    Console.WriteLine($"added {r}");
                    reparsed = _learner.ReparseWithAddition(mutatedGrammar, r.NumberOfGeneratingRule);
                }
                else if (counter == 1)
                {
                    counter++;
                    var rc = new RuleCoordinates()
                    {
                        LHSIndex = 3,
                        RHSIndex = 98
                    };

                    mutatedGrammar.StackConstantRules.Add(rc);

                    var r = ContextSensitiveGrammar.RuleSpace[rc];
                    Console.WriteLine($"added {r}");
                    reparsed = _learner.ReparseWithAddition(mutatedGrammar, r.NumberOfGeneratingRule);
                }
                else if (counter == 2)
                {
                    counter++;
                    var rc = new RuleCoordinates()
                    {
                        LHSIndex = 1,
                        RHSIndex = 94
                    };

                    mutatedGrammar.StackConstantRules.Add(rc);

                    var r = ContextSensitiveGrammar.RuleSpace[rc];
                    Console.WriteLine($"added {r}");
                    reparsed = _learner.ReparseWithAddition(mutatedGrammar, r.NumberOfGeneratingRule);
                }
                else if (counter == 3)
                {
                    counter++;
                    var rc = new RuleCoordinates()
                    {
                        LHSIndex = 5,
                        RHSIndex = 143
                    };

                    mutatedGrammar.StackConstantRules.Add(rc);

                    var r = ContextSensitiveGrammar.RuleSpace[rc];
                    Console.WriteLine($"added {r}");
                    reparsed = _learner.ReparseWithAddition(mutatedGrammar, r.NumberOfGeneratingRule);
                }
                else if (counter == 4)
                {
                    counter++;
                    var rc = new RuleCoordinates()
                    {
                        LHSIndex = 3,
                        RHSIndex = 119
                    };

                    mutatedGrammar.StackConstantRules.Add(rc);

                    var r = ContextSensitiveGrammar.RuleSpace[rc];
                    Console.WriteLine($"added {r}");
                    reparsed = _learner.ReparseWithAddition(mutatedGrammar, r.NumberOfGeneratingRule);
                }
                else if (counter == 5)
                {
                    counter++;
                    var rc = new RuleCoordinates()
                    {
                        LHSIndex = 3,
                        RHSIndex = 138
                    };

                    mutatedGrammar.StackConstantRules.Add(rc);

                    var r = ContextSensitiveGrammar.RuleSpace[rc];
                    Console.WriteLine($"added {r}");
                    reparsed = _learner.ReparseWithAddition(mutatedGrammar, r.NumberOfGeneratingRule);
                }
                else if (counter == 6)
                {
                    counter++;
                    var rc = new RuleCoordinates()
                    {
                        LHSIndex = 1,
                        RHSIndex = 117
                    };

                    mutatedGrammar.StackConstantRules.Add(rc);

                    var r = ContextSensitiveGrammar.RuleSpace[rc];
                    Console.WriteLine($"added {r}");
                    reparsed = _learner.ReparseWithAddition(mutatedGrammar, r.NumberOfGeneratingRule);
                }

                
                else if (counter == 7)
                {
                    counter++;
                    var rc = new RuleCoordinates()
                    {
                        LHSIndex = 5,
                        RHSIndex = 112
                    };

                    mutatedGrammar.StackConstantRules.Add(rc);

                    var r = ContextSensitiveGrammar.RuleSpace[rc];
                    Console.WriteLine($"added {r}");
                    reparsed = _learner.ReparseWithAddition(mutatedGrammar, r.NumberOfGeneratingRule);
                }
                else if (counter == 8)
                {
                    counter++;
                    var rc = new RuleCoordinates()
                    {
                        LHSIndex = 3,
                        RHSIndex = 146
                    };

                    mutatedGrammar.StackConstantRules.Add(rc);

                    var r = ContextSensitiveGrammar.RuleSpace[rc];
                    Console.WriteLine($"added {r}");
                    reparsed = _learner.ReparseWithAddition(mutatedGrammar, r.NumberOfGeneratingRule);
                }
                else if (counter == 9)
                {
                    counter++;
                    var rc = new RuleCoordinates()
                    {
                        LHSIndex = 0,
                        RHSIndex = 50
                    };

                    mutatedGrammar.StackConstantRules.Add(rc);

                    var r = ContextSensitiveGrammar.RuleSpace[rc];
                    Console.WriteLine($"added {r}");
                    reparsed = _learner.ReparseWithAddition(mutatedGrammar, r.NumberOfGeneratingRule);
                }
                else if (counter == 10)//forever)
                {
                    counter++;
                    var rc = new RuleCoordinates()
                    {
                        LHSIndex = 0,
                        RHSIndex = 50
                    };

                    mutatedGrammar.StackConstantRules.Remove(rc);

                    var r = ContextSensitiveGrammar.RuleSpace[rc];
                    Console.WriteLine($"removed {r}");
                    reparsed = _learner.ReparseWithDeletion(mutatedGrammar, r.NumberOfGeneratingRule);
                }